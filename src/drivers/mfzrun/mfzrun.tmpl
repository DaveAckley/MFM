#!/usr/bin/perl -Tw
# -*- mode:perl -*-

sub BEGIN {
    # Seal us up a bit for living la vida tainted
    $ENV{'PATH'} = "/bin:/usr/bin";
    delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};
}

<<<INCLUDE:common.pl.inc>>>
SetUDieMsg("Type '$0' for help\n");

use File::Temp qw(tempdir);
use MIME::Base64 qw(decode_base64);
use Crypt::OpenSSL::RSA;

my (undef, $binDir, $scriptName) = File::Spec ->splitpath($0);
$binDir =~ s!/$!!;

my $progname = KDGetVerb(0);
my $optverb = NextArg() || "";
if (!defined($progname)) {
    $progname = "YOURMFZFILE.mfz";
    $optverb = "help";
}
#SetProgramName($progname);

my $verb = lc($optverb);
if ($verb eq "help" || $verb eq "-h") {
    my $v = VERSION;
    print <<EOH;
MFZ format simulation runner version $v

SYNOPSIS: $0 [-kd KEY_DIRECTORY] FILE.mfz [COMMAND]

  KEY_DIRECTORY defaults to ~/.mfm/ if -kd is omitted

$0
$0 $progname help
$0 $progname -h
    Print this help

$0 $progname verify
    Check the file signature but do not run it
    (use VERIFY to report more details)

$0 $progname list
    Check the file signature and list contents but do not run it
    (use LIST to print full paths)

$0 $progname announce
    Print the contents of the ANNOUNCE.PKT metadata file, if it exists
    (use ANNOUNCE to append VERIFY info as well)

$0 $progname unpack [DESTINATION_DIRECTORY]
    Verify and unpack the file but do not run it

$0 $progname
$0 $progname run [ARG ARG..]
    Run the file if it is signed by a recognized handle, possibly
    with additional arguments passed to the simulator.

$0 DEMO demo [ARG ARG..]
    Search in prespecified locations for a built-in demo named DEMO,
    and run it if found, possibly with additional arguments as in run

EOH
    ListDemosDat();
    exit 0;
}

my %verbs = (
    "" => 1,
    "verify" => 1,
    "run" => 1,
    "demo" => 1,
    "unpack" => 1,
    "list" => 1,
    "announce" => 1,
    "" => 1,
);

UDie("Unknown command '$optverb'")
    unless defined $verbs{$verb};

if ($verb eq "demo") {
    $progname = FindDemoOrDie($progname);
    $verb = "run";
}

if ($verb ne "run" && $verb ne "unpack") {
    my $fx = $ARGV[0];
    UDie("Unrecognized extra arguments (beginning with '$fx')")
        if defined $fx;
}

if (!open MFZ, "<", $progname) {
    warn "Try just '$0' for help\n"
        if $progname =~ /^-?-?h(elp)?$/;
    die "Can't read '$progname' as .mfz file: $!\n";
}

my $firstLine = <MFZ>;

die "Bad .mfz header in '$progname'"
    unless defined $firstLine and $firstLine eq MFZRUN_HEADER;

my $keydir = GetPublicKeyDir();

my $u = new IO::Uncompress::Unzip(*MFZ)
    or die "Cannot read $progname: $UnzipError";

my @outerpaths = UnzipStreamToMemory($u);
if (0) {
    for my $op (@outerpaths) {
        print $op->[0]." ".$op->[1]." ".$op->[2]." ".length($op->[3])."\n";
    }
}

my ($zippath,$zipname,undef,$zipdata) = FindName(\@outerpaths,MFZ_ZIP_NAME,undef);
die "Incorrect .mfz packing" unless defined($zipname);

my ($sigpath,$signame,undef,$sigdata) = FindName(\@outerpaths,MFZ_SIG_NAME,undef);
die ".mfz signature not found" unless defined($signame);

my $u2 = new IO::Uncompress::Unzip(\$zipdata)
    or die "Cannot read $zippath/$zipname: $UnzipError";

my $destdir;
if ($verb eq "unpack") {
    my $optdir = NextArg() || "";
    if ($optdir =~ /^(.+)$/) {
        $destdir = $1;  # Gah.
    } else {
        $destdir = $progname;
        UDie("Specify where to unpack '$progname': Non-standard name (no .mfz extension)")
            unless $destdir =~ /^(.+)[.]mfz$/;
        $destdir = $1;
        UDie("Specify where to unpack '$progname': Default location '$destdir' already exists")
            if -e $destdir;
    }
}

if (!defined $destdir) {
    my $template = "mfzXXXXXXXX";
    my $cleanup = 1;

    # Save 'temporary' dir if unpacking..
    $cleanup = 0 
        if $verb eq "unpack";

    $destdir =
        tempdir( $template,
                 TMPDIR => 1,
                 CLEANUP => $cleanup
        );
}

my @innerpaths = UnzipStream($u2, $destdir);
my ($pubkeypath,$pubkeyname,$pubkeytime) = FindName(\@innerpaths,MFZ_PUBKEY_NAME,undef);
die "Incorrect .mfz packing - missing pubkey" unless defined($pubkeyname);
my $fullpubkeypath = "$pubkeypath/$pubkeyname";

my $fullpubstring = ReadWholeFile($fullpubkeypath);
my ($pubhandle, $pubkey) = SplitHandleFromKey($fullpubstring);
UDie("Bad format public key") unless defined $pubhandle;

my $rsapub = Crypt::OpenSSL::RSA->new_public_key($pubkey);
$rsapub->use_pkcs1_padding();
$rsapub->use_sha512_hash();

my $sig = decode_base64($sigdata);
die "Invalid signature '$sigdata'/'$sig'" unless $rsapub->verify($zipdata, $sig);

ValidatePubKey($pubhandle,$pubkey);
my $fingerprint = ComputeFingerprintFromFullPublicKey($fullpubstring);

if ($verb eq "announce") {
    my ($pktpath,$pktname,undef,$pktdata) = FindName(\@outerpaths,CDM_ANNOUNCE_NAME,undef);
    unless (defined $pktname) {
        print STDERR "No ".CDM_ANNOUNCE_NAME." in $progname\n";
        exit;
    }

    unless (length($pktdata) == ANNOUNCE_PACKET_LENGTH) {
        die "Corrupt announcement";
    }
    my ($data, $sig) = unpack(ANNOUNCE_PACK_PACKET_FORMAT, $pktdata);
            
    my $rsapub = Crypt::OpenSSL::RSA->new_public_key($pubkey);
    $rsapub->use_pkcs1_padding();
    $rsapub->use_sha512_hash();

#    print "COORD($data)\n";
    die CDM_ANNOUNCE_NAME." has invalid signature ($pubhandle)" unless $rsapub->verify($data, $sig);

    print $pktdata;
    if ($optverb eq "ANNOUNCE") {  # use ANNOUNCE to get the packet + VERIFY info
        $optverb = "VERIFY";
        $verb = lc($optverb);
    } else {
        exit;
    }
}


if ($optverb eq "VERIFY") {
    my $checksum = ComputeChecksumOfString($zipdata);
    print "SIGNATURE_CHECK [OK]\n";
    print "INNER_CHECKSUM [$checksum]\n";
    print "INNER_TIMESTAMP [$pubkeytime]\n";
    print "SIGNING_HANDLE [$pubhandle]\n";
    print "HANDLE_FINGERPRINT [$fingerprint]\n";
    print "HANDLE_PUBKEY [$pubkey]\n";
} else {
    print "SIGNED BY RECOGNIZED HANDLE: $pubhandle ($fingerprint)\n";
}
if ($verb eq "verify") {
    exit 0;
}
if ($verb eq "list") {
    my $maxpath = 0;
    my $maxname = 0;
    my $maxtime = 0;
    my $maxsize = 0;
    for my $prec (@innerpaths) {
        my ($path, $name, $time, $size) = @{$prec};
        $path =~ s!^$destdir/!!;
        $time = localtime($time);
        $maxpath = length($path) if length($path) > $maxpath;
        $maxname = length($name) if length($name) > $maxname;
        $maxtime = length($time) if length($time) > $maxtime;
        $maxsize = length($size) if length($size) > $maxsize;
    }
    my $maxlen = 40;
    if ($optverb eq "LIST") {
        $maxlen = $maxpath;
    } else { 
        $maxpath = $maxlen if $maxpath > $maxlen;
    }
    printf("FILES:\n%*s  %*s  %*s  %*s\n",
           -$maxpath, ($maxpath > 4)?"Path":"",
           -$maxname, "Name",
           $maxsize, "Size",
           -$maxtime, "Time"
        );
    for my $prec (@innerpaths) {
        my ($path, $name, $time, $size) = @{$prec};
        $path =~ s!^$destdir/!!;
        my $ellipsis = "[...]";
        my $clip = length($path) - ($maxpath - length($ellipsis));
        if ($maxpath > length($ellipsis) && $clip > 0) {
            # /4 since ends of paths seem more informative
            substr($path, ($maxpath-length($ellipsis))/4, $clip) = $ellipsis;
        }
        $time = localtime($time);
        printf("%*s  %*s  %*s  %*s\n",
               -$maxpath, $path,
               -$maxname, $name,
               $maxsize, $size,
               -$maxtime, $time
            );
    }
    exit 0;
}

if ($verb eq "unpack") {
    print "UNPACKED INTO: $destdir\n";
    exit 0;
}


my @mfmargs;

my ($ulams,$splats,$incs,$goodSOs, $badSOs) = (0,0,0,0,0);
my $platform = `/bin/uname -i`;
chomp $platform;
my $platformsize;
if ($platform eq 'x86_64' || $platform =~ /^armv8.*/) {
    $platformsize = 64;
} elsif ($platform eq 'i386' || $platform eq 'i686' || $platform =~ /^armv7.*/) {
    $platformsize = 32;
} else {
    print STDERR "WARNING: Unrecognized hardware platform '$platform'!  Assuming it's a 32 bit architecture\n";
    $platformsize = 32;
}
for my $prec (@innerpaths) {
    my ($path, $name, $time) = @{$prec};
    my $fullpath = "$path$name";
    if ($name eq "libcue.so") {
        my $oinfo;
        {
            local $/ = undef;
            open my $fh, '-|', '/usr/bin/objdump', "-r", $fullpath or IDie("Can't open pipe: $!");
            $oinfo = <$fh>;  # or read in a loop, which is more likely what you want
            close $fh or IDie("Can't close pipe: $!");
        }
        $oinfo =~ /$fullpath:\s+file format\s+([^\n]+)\n/
            or IDie("Can't parse objdump output");
        my $sotype = $1;
        my $sosize;
        if ($sotype eq "elf64-x86-64") {
            $sosize = 64;
        } elsif ($sotype eq "elf32-i386" || $sotype eq "elf32-littlearm") {
            $sosize = 32;
        } else {
            ++$badSOs;
            print("Unrecognized .so file format '$sotype'\n");
        }
        if ($sosize != $platformsize) {
            print("Skipping $sosize bit .so file; we need $platformsize bits\n");
            ++$badSOs;
        } else {
            ++$goodSOs;
            push @mfmargs, "-ep", $fullpath;
        }
    } elsif ($name =~ /[.]mfs$/) {
        push @mfmargs, "-cp", $fullpath;
    } elsif ($name eq "args.txt") {
        my @fileArgs = processArgs($fullpath);
        if (defined $fileArgs[0]) {
            if ($fileArgs[0] =~ /^\{/) {
                my $geom = shift @fileArgs;
                unshift @mfmargs, $geom;
            }
            push @mfmargs, @fileArgs;
        }
    } elsif ($name eq MFZ_PUBKEY_NAME) {
        # Don't need a complaint about this one
    } elsif ($name eq MFZ_FILE_NAME) {
        # Or this one
    } elsif ($name =~ /[.]ulam$/) {
        ++$ulams;
        print STDERR "Skipping ulam source: $name\n";
    } elsif ($name =~ /[.]splat$/) {
        ++$splats;
        print STDERR "Skipping splat source: $name\n";
    } elsif ($name =~ /[.]inc$/) {
        ++$incs;
        print STDERR "Skipping include source: $name\n";
    } else {
        print STDERR "Unrecognized file type, ignored: $name\n";
    }
}

if ($goodSOs == 0 && $verb eq 'run') {
    print STDERR "CANNOT RUN .mfz file: No usable .so files found\n";
    if ($badSOs > 0) {
        print STDERR "  The $badSOs .so file(s) in this .mfz are incompatible with this $platformsize-bit platform\n";
        if ($ulams > 0) {
            print STDERR "  However, $ulams .ulam file(s) are present\n";
            print STDERR "  You may be able to rebuild it for this platform\n\n";
        } # For now we're not mentioning SPLAT files
    }
    exit 4;
}

if ($verb eq "run" && scalar(@ARGV) > 0) { # any remaining args are for mfms
    my @args = purifyArgs(@ARGV);
    my $arg;
    while (defined($arg = shift @args)) {
        if ($arg =~ /^\{/) {  # geometry if present goes at the front

            if (defined $mfmargs[0] && $mfmargs[0] =~ /^\{/) {
                if ($arg ne $mfmargs[0]) {
                    print STDERR "WARNING: Overriding prior geometry '$mfmargs[0]' with '$arg'\n";
                    $mfmargs[0] = $arg;  # replace at front
                }
            } else {
                unshift @mfmargs, $arg;  # insert at front
            }
        } else {   # everything else goes at the end.
            push @mfmargs, $arg;
        }
    }
}

my $cmd = "$binDir/mfms";
unshift @mfmargs, $cmd;

print "@mfmargs\n";

my $result = system $cmd @mfmargs;
sleep 0.25;
exit $result;

sub processArgs {
    my $path = shift;
    open ARGTXT, "<", $path or die "Can't open args: $!";
    my $line = <ARGTXT>;
    close ARGTXT or die "Can't close args: $!";
    chomp($line);
    my @args = split(" ",$line);
    return purifyArgs(@args);
}

sub purifyArgs {
    my @args = @_;
    for (my $i = 0; $i < scalar(@args); ++$i) {
        my $arg = $args[$i];
        if ($i == 0) {
            if ($arg =~ /^(\{+\d+[a-zA-Z]\d+\}+)$/) {
                $args[0] = $1;
                next;
            }
        }
        UDie("Bad content in argument: '$arg'")
            unless $arg =~ m!^\s*(:?[-=a-zA-Z0-9:./]*)\s*$!;
        $args[$i] = $1;
    }
    return @args;
}

sub CheckForPubKey {
    my $handle = shift;
    my $path = GetPublicKeyFile($handle);
    if (-r $path) {
        return ($path, ReadPublicKeyFile($handle));
    }
    return ($path);
}

sub TryToPromoteInstalledPubKey {
    my $handle = shift;
    my $ehandle = EscapeHandle($handle);
    my $dir = "/usr/lib/@DEBIAN_PACKAGE_NAME@/MFM/res/public_keys/";
    my $pub = "$dir/$ehandle.pub";
    if (-r $pub) {
        my $localpub = GetPublicKeyFile($handle);
        IDie("Inconsistent") if -r $localpub; # shouldn't have gotten here
        WriteWholeFile($localpub, ReadWholeFile($pub));
        print "Copying public key for '$handle' from $pub\n";
    }
    return CheckForPubKey($handle);
}

sub SavePubKey {
    my ($handle, $pubkey) = @_;
    my $pubkeypath = GetPublicKeyFile($handle);
    my $data = JoinHandleToKey($handle,$pubkey);
    WriteWholeFile($pubkeypath, $data);
    return $pubkeypath;
}

sub ValidatePubKey {
    my ($handle, $pubstring) = @_;
    my ($path, $knownpub) = CheckForPubKey($handle);
    if (!defined($knownpub)) {
        ($path, $knownpub) = TryToPromoteInstalledPubKey($handle);
    }
    if (defined($knownpub)) {
        chomp($knownpub);  # Try to normalize last line
        $knownpub .= "\n"; # ending to what we think we expect
        if ($pubstring ne $knownpub) {
            print "\nERROR: '$handle' is known (found in '$path') but supplied public key doesn't match!($knownpub:$pubstring)\n";
            exit 3;
        }
    } else {
        my $decided = 0;
        while (!$decided) {
            print <<EOM;
WARNING!
WARNING: $progname signer handle '$handle' is not recognized!
WARNING: Running untrusted code is dangerous!
WARNING: You have three choices here:
WARNING: Q - Quit running this program now (default, recommended)
WARNING: R - Run the program anyway (caution!)
WARNING: S - Save this handle as trusted and run the program now (caution!)
WARNING!
EOM
            print "What do you want to do? [Qrs] ";
            my $answer = <>;
            $answer = "" unless defined $answer;  # Don't warn on eof
            chomp($answer);
            $answer = 'q' if ($answer eq "");
            $answer = lc($answer);
            if ($answer eq 'q') {
                print "Quit\n";
                exit 1;
            }
            if ($answer eq 's') {
                my $path = SavePubKey($handle, $pubstring);
                print "Saved handle to $path\n";
            }
            if ($answer eq 's' || $answer eq 'r') {
                $decided = 1;
            } else {
                print "Unrecognized reply; please choose 'q', 'r', or 's'\n";
            }
        }
    }
}

# Find and parse the demos.dat file
sub ListDemosDat {
    my $path;
    -r ($path = "/usr/lib/@DEBIAN_PACKAGE_NAME@/MFM/res/elements/demos.dat") or
    -r ($path = "./res/elements/demos.dat") or
    return 0;
    my $count = 0;
    print "  Built-in demos:\n";
    open(DDAT,"<$path") or die "Can't read '$path': $!";
    {
        LOOP:
        while (1) {
            my ($name, $mfz, $so, $classes, $reserved);
            {
                local $/ = "\0";
                $name = <DDAT>; 
                last LOOP unless defined $name;
                chomp $name; 
                $mfz = <DDAT>; $so = <DDAT>; $classes = <DDAT>; $reserved = <DDAT>;
                chomp $mfz; chomp $so; chomp $classes; chomp $reserved;
            }
            my $unused = <DDAT>; # \n delimited
            print "   $0 $name demo\n";
            ++$count;
        }
    }
    close DDAT or die $!;
    if ($count == 0) {
        print "  --No demos found--\n";
    } else {
    }
    return $count;
}

# Search for demos in a variety of locations
sub FindDemoOrDie {
    my $demoname = shift;
    # be tight about demo names, they turn into file names
    if ($demoname =~ /[^-A-Za-z0-9]/) {
        UDie("Illegal character '$&' in demo name");
    }
    $demoname .= ".mfz";
    my $path;
    return $path if -r ($path = "/usr/lib/@DEBIAN_PACKAGE_NAME@/MFM/res/elements/demos/$demoname");
    return $path if -r ($path = "~/.mfm/demos/$demoname");
    return $path if -r ($path = "./res/elements/demos/$demoname");

    UDie("No '$demoname' found");
}
