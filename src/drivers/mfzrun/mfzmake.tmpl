#!/usr/bin/perl -Tw
# -*- mode:perl -*-
use strict;

sub BEGIN {
    # Seal us up a bit for living la vida tainted
    $ENV{'PATH'} = "/bin:/usr/bin";
    $ENV{'LC_ALL'} = "C";
    delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};
}

<<<INCLUDE:common.pl.inc>>>
SetUDieMsg("Type '$0 help' for help\n");

use Crypt::OpenSSL::RSA;

use MIME::Base64  qw(encode_base64);

use IO::Compress::Zip qw(zip $ZipError);

use Cwd 'abs_path';

sub Help {
    my $v = VERSION;
    print <<EOH;

MFZ format file packer version $v

SYNOPSIS: $0 [-kd KEY_DIRECTORY] COMMAND FILES..

  KEY_DIRECTORY defaults to ~/.mfm/ if -kd is omitted

COMMAND FORMS:

$0 help  [or]  -h  [or]  --help

    Print this help and exit

$0 version   [or]  -v

    Print mfzmake version number and exit

$0 make HANDLE MFZFILETOMAKE filetopack1 filetopack2..

    Create a mfz file named MFZFILETOMAKE that can be run by mfzrun
    containing the supplied files (along with the HANDLE's public
    keyfile), signed by HANDLE's private key.  If HANDLE is '-',
    use the default handle (see 'mfzmake default', below).

    Certain filetopack names and globs are recognized and handled
    specially by mfzmake and/or mfzrun, including (for any FOO):

       (1) FOO.so    -> mfzrun maps this to -ep FOO.so
       (2) FOO.mfs   -> mfzrun maps this to -cp FOO.mfs
       (3) FOO.ulam  -> unused by mfzrun (but ulam might use)
       (4) args.txt  -> mfzrun adds first line to simulator arguments

    Other files are accepted and packed by mfzmake, but unused by mfzrun.

$0 cdmake REGNUM SLOTNUM LABEL filetopack1 filetopack2..

    Like '$0 make',
    except takes the REGNUM of a registered handle instead of the
    handle name itself, the SLOTNUM of the resulting content instead
    of an MFZ filename, plus an up-to-16 byte LABEL.  'cdmake' is
    required for .mfz files that are managed by CDM on a T2 tile grid.

$0 keygen HANDLE

    Generate a signing key for HANDLE.

$0 default HANDLE

    Make HANDLE (which must already exist) be the default handle for
    this user.  If HANDLE is '-', remove any existing default handle.

$0 cansign HANDLE

    Exit successfully if HANDLE can be used for signing (meaning both
    public and private portions of it are accessible), otherwise exit
    status 6

$0 canvalidate HANDLE

    Exit successfully if HANDLE can be used for validation (meaning at
    least the public portion of it is accessible), otherwise exit
    status 7.

$0 keydel HANDLE

    Delete the public and private portions of HANDLE.

$0 burn HANDLE

    Delete only the private portion of HANDLE.  HANDLE will no longer
    be usable for signing .mfz files, but will still be available to
    validate previously-signed .mfz files.

EOH
    exit(0);
}

my @zipOtherOptions;
ConfigureZipOptions();  # Ubuntu 12.04's zip module doesn't know CanonicalName! :(

my $verb = KDGetVerb(1);

Help() if $verb eq "help" or $verb eq "-h" or $verb eq "--help";
VersionExit("mfzmake") if $verb eq "version" or $verb eq "-v";
UDie("Unknown switch '$verb'") if $verb =~ /^-/;

DoCDMake() if $verb eq "cdmake";
DoMake() if $verb eq "make";
DoKeygen() if $verb eq "keygen";
DoKeydel() if $verb eq "keydel";
DoCanSign() if $verb eq "cansign";
DoCanValidate() if $verb eq "canvalidate";
DoBurn() if $verb eq "burn";
DoDefaultHandle() if $verb eq "default";
DoVerify() if $verb eq "verify";
UDie("Unknown command '$verb'");

############################3
# DoMake / DoCDMake

sub DoMake {
    my $handle = GetLegalHandle(NextArg());
    my $mfzfile = NextArg();
    my $innertime = MakeNextZipTime();
    DoMakeWithHandle($handle,$mfzfile,$innertime); # regnum and later args undef
}

sub DoCDMake {
    my ($regnum,$handle) = GetLegalRegnum(NextArg());
    my ($slotnum) = GetLegalSlotnum(NextArg());
    my ($label) = GetLegalLabel(NextArg());
    my ($innertime,$stamptime) = MakeNextZipTime();
    my $mfzfile = sprintf("cdmss-%02x-%06x.mfz",$slotnum,$stamptime);
    UDie("File '$mfzfile' already exists.  Maybe wait a couple minutes, tiger?")
        if -e $mfzfile;
    DoMakeWithHandle($handle,$mfzfile,$innertime,$regnum,$slotnum,$stamptime,$label);
}

sub DoMakeWithHandle {
    my ($handle,$mfzfile,$assignedinnertime,$regnum,$slotnum,$stamptime,$label) = @_;

    my $privkeyfile = GetPrivateKeyFile($handle);
    $privkeyfile = ReadableFileOrDie("private key file", $privkeyfile);

    my $pubkeyfile =  GetPublicKeyFile($handle);
    $pubkeyfile = ReadableFileOrDie("public key file", $pubkeyfile);

    my $pubkeydata = ReadWholeFile($pubkeyfile);

    $mfzfile = WritableFileOrDie("MFZ file", $mfzfile);
    $mfzfile =~ /[.]mfz$/ or UDie("Supplied MFZ filename '$mfzfile' doesn't end in '.mfz'");
    ((!-e $mfzfile) || (-f $mfzfile && -w $mfzfile)) or UDie("MFZ filename '$mfzfile' is not writable");

    my (undef,undef,$mfzfilename) =  File::Spec->splitpath($mfzfile);

    my @files = RestOfArgs();
    scalar(@files) or UDie("No files to pack?");

    for my $file (@files) {
        ReadableFileOrDie("file to pack", $file);
    }

    my ($inner,$innertime) = MakeInnerZip($pubkeydata,$mfzfilename,$assignedinnertime, @files);

    my $signed = SignString($privkeyfile, $inner);
#    WriteWholeFile($mfzfile,MFZRUN_HEADER.$signed.$inner,0644);
    my $outer = MFZRUN_HEADER.MakeOuterZip($signed,$inner,undef);

    my $cdmmap = ""; # Assume pure MFZ format
    if (defined($regnum)) {
        $cdmmap = MakeCDMMap($regnum,$slotnum,$stamptime,$mfzfilename,$privkeyfile,$outer,$innertime,$label);
    }

    WriteWholeFile($mfzfile,$cdmmap.$outer,0644);
    print "Wrote '$mfzfile'\n";
    exit 0;
}

############################3

sub DoVerify {
    my $mfzpath = NextArg();
    IDie "IMPLEMENT ME";
}

sub DoKeygen {
    my $handle = LastArg();

    UntaintHandleIfLegal(\$handle)
        or UDie("Bad handle '$handle'");

    my $privkeyfile = GetPrivateKeyFile($handle);
    $privkeyfile = WritableFileOrDie("private key file", $privkeyfile);

    my $pubkeyfile =  GetPublicKeyFile($handle);
    $pubkeyfile = WritableFileOrDie("public key file", $pubkeyfile);

    my $errors = 0;
    if (-e $privkeyfile) {
        ++$errors;
        print STDERR "ERROR: A private key file for '$handle' already exists ($privkeyfile)\n";
    }
    if (-e $pubkeyfile) {
        ++$errors;
        print STDERR "ERROR: A public key file for '$handle' already exists ($pubkeyfile)\n";
    }
    if ($errors > 0) {
        my $desc = "that file";
        if ($errors > 1) {
            $desc = "those files";
        }
        print STDERR "ERROR: Generally you shouldn't reuse handle names with different keys!\n";
        print STDERR "ERROR: But if you really want new keys for '$handle', perhaps first try\n";
        print STDERR "ERROR: '$0 keydel $handle' to remove $desc\n";
        exit 4;
    }

    my $rsa = Crypt::OpenSSL::RSA->generate_key(1024);

    my $privkey =  $rsa->get_private_key_string();
    my $fullprivkey = JoinHandleToKey($handle,$privkey);
    WriteWholeFile($privkeyfile, $fullprivkey, 0600);

    my $pubkey = $rsa->get_public_key_string();
    my $fullpubkey = JoinHandleToKey($handle,$pubkey);
    WriteWholeFile($pubkeyfile, $fullpubkey);

    # calculate digest from string/buffer
    my $fingerprint = ComputeFingerprintFromFullPublicKey($fullpubkey);

    print "Handle: \"$handle\" ($fingerprint) @ $pubkeyfile\n";
    exit 0;
}

sub DoKeydel {
    my $handle = LastArg();
    UntaintHandleIfLegal(\$handle)
        or UDie("Bad handle '$handle'");

    my $privkeyfile = GetPrivateKeyFile($handle);
    $privkeyfile = WritableFileOrDie("private key file", $privkeyfile);

    my $pubkeyfile =  GetPublicKeyFile($handle);
    $pubkeyfile = WritableFileOrDie("public key file", $pubkeyfile);

    my $havepriv = -e $privkeyfile;
    my $havepub = -e $pubkeyfile;

    if (!$havepriv && !$havepub) {
        print STDERR "ERROR: No private or public key file for '$handle' found\n";
        exit 5;
    }
    
    my $errors = 0;
    if ($havepriv && !unlink $privkeyfile) {
        ++$errors;
        print STDERR "ERROR: Couldn't remove private key file '$privkeyfile' for '$handle': $!\n";
    }
    if ($havepub && !unlink $pubkeyfile) {
        ++$errors;
        print STDERR "ERROR: Couldn't remove public key file '$pubkeyfile' for '$handle': $!\n";
    }
    if ($errors > 0) {
        my ($s,$n) = ("", "s");
        if ($errors > 1) {
            $s = "s";
            $n = "";
        }
        print STDERR "ERROR: $errors file$s remain$n undeleted for '$handle'\n";
        exit 5;
    }
    exit 0;
}

sub DoCanSign {
    my $handle = LastArg();
    CheckFilesInternal($handle,1,1,6);
    exit(0);
}

sub DoCanValidate {
    my $handle = LastArg();
    CheckFilesInternal($handle,0,1,7);
    exit(0);
}

sub CheckFilesInternal {
    my ($handle,$needpriv,$needpub,$badexit) = @_;

    UntaintHandleIfLegal(\$handle)
        or UDie("Bad handle '$handle'");

    my $privkeyfile = GetPrivateKeyFile($handle);
    $privkeyfile = WritableFileOrDie("private key file", $privkeyfile);

    my $pubkeyfile =  GetPublicKeyFile($handle);
    $pubkeyfile = WritableFileOrDie("public key file", $pubkeyfile);

    my $havepriv = -r $privkeyfile;
    my $havepub = -r $pubkeyfile;

    my $errors = 0;
    if ($needpriv && !$havepriv) {
        print STDERR "ERROR: Missing or unreadable private key file for '$handle' ($privkeyfile)\n";
        ++$errors;
    }
    if ($needpub && !$havepub) {
        print STDERR "ERROR: Missing or unreadable public key file for '$handle' ($pubkeyfile)\n";
        ++$errors;
    }
    
    if ($errors > 0) {
        my ($s,$n) = ("", "s");
        if ($errors > 1) {
            $s = "s";
            $n = "";
        }
        print STDERR "ERROR: $errors file$s inaccessible for '$handle'\n";
        exit $badexit;
    }
}

sub DoBurn {
    my $handle = LastArg();
    UntaintHandleIfLegal(\$handle)
        or UDie("Bad handle '$handle'");

    my $privkeyfile = GetPrivateKeyFile($handle);
    $privkeyfile = WritableFileOrDie("private key file", $privkeyfile);

    my $pubkeyfile =  GetPublicKeyFile($handle);
    $pubkeyfile = WritableFileOrDie("public key file", $pubkeyfile);

    my $havepriv = -e $privkeyfile;
    my $havepub = -e $pubkeyfile;

    if (!$havepub) {
        print STDERR "WARNING: No public key for '$handle' found ($pubkeyfile)\n";
        exit 6;
    }
    
    if (!$havepriv) {
        print STDERR "('$handle' has public key, but no private key found, OK)\n";
        exit 0;
    }

    if (!unlink $privkeyfile) {
        print STDERR "ERROR: Couldn't remove private key file '$privkeyfile' for '$handle': $!\n";
        exit 7;
    }
    exit 0;
}

sub DoDefaultHandle {
    my $handle = LastArg();
    if ($handle eq "-") {
        my $defaulthandlefile = GetDefaultHandleFile();
        if (!-e $defaulthandlefile) {
            print STDERR "WARN: No default handle to remove\n";
        } else {
            if (unlink $defaulthandlefile) {
                print STDERR "NOTE: Default handle cleared\n";
            } else {
                print STDERR "WARN: Could not remove '$defaulthandlefile': $!\n";
                exit 1;
            }
        }
        exit 0;
    }

    UntaintHandleIfLegal(\$handle)
        or UDie("Bad handle '$handle'");

    my $privkeyfile = GetPrivateKeyFile($handle);
    if (!-e $privkeyfile) {
        print STDERR "ERROR: Handle '$handle' not found\n";
        exit 1;
    }
    $privkeyfile = ReadableFileOrDie("private key file", $privkeyfile);

    my $defaulthandlefile = GetDefaultHandleFile();
    my $old = GetDefaultHandle();
    if (defined $old) {
        if ($handle ne $old) {
            print STDERR "WARN: Replacing previous default handle '$old'\n";
        }
    }
    WriteWholeFile($defaulthandlefile,$handle,0700);
    if (!defined $old) {
        print STDERR "NOTE: '$handle' set as default handle\n";
    }
    exit 0;
}


############################
# Internal routines
# convert module-name to path

sub GetModuleVersion {
    my $mod = shift;
    my $file = $mod;
    $file =~ s{::}{/}gsmx;
    $file .= '.pm';

    # Pull in the module, if it exists
    eval { require $file }
    or die "can't find module $mod\n";

    # Get the version from the module, if defined
    my $ver;
    { no strict 'refs';
      $ver = ${$mod . "::VERSION"} || 'UNKNOWN';
    }
    return $ver;
}

sub ConfigureZipOptions {
    my $zipVer = GetModuleVersion("IO::Compress::Zip");
    if ($zipVer >= 2.039) {
        @zipOtherOptions = ( CanonicalName => 1 );
    }
#    print "$zipVer/@zipOtherOptions\n";
}

sub MakeSlotStamp {
    my ($slotnum,$stamptime) = @_;
    IDie("Bad slotnum") if $slotnum <= 0 || $slotnum > 255;
    IDie("Bad stamptime") if $stamptime < 0 || $slotnum >= (1<<24);
    my $slotstamp = ((($slotnum)&0xff)<<24)|($stamptime&((1<<24)-1));
    return $slotstamp;
}

sub MakeCDMMap {
    my ($regnum,$slotnum,$stamptime,$mfzfilename,$privkeyfile,$outer,$innertime,$label) =
        @_;
    my $slotstamp = MakeSlotStamp($slotnum,$stamptime);
    my $mappedFileLen = length($outer);
    my $bitsInBlock = 8;
    do ++$bitsInBlock while (1<<$bitsInBlock) * 100 < $mappedFileLen;
    my $blockSize = (1<<$bitsInBlock);
    my @xsums = ("") x 100;
    my $sha = Digest::SHA->new(512);
    my $lastfullxsum;
    for (my $block = 0; $block<100;++$block) {
        my $offset = $blockSize*$block;
        last if $offset > $mappedFileLen;
        my $chunk = substr($outer,$offset,$blockSize); # blockSize or til eof
        $sha->add($chunk);
        $lastfullxsum = $sha->clone()->digest();
        my $xsum8 = substr($lastfullxsum,0,8);
        $xsums[$block] = $xsum8;
    }
    my $maptosign =
        pack(CDM10_PACK_SIGNED_DATA_FORMAT,
             CDM_FORMAT_MAGIC.CDM_FORMAT_VERSION_MAJOR.CDM_FORMAT_VERSION_MINOR."\n",
             $bitsInBlock,
             $regnum,
             $slotstamp,
             $mappedFileLen,
             $label,
             $lastfullxsum,
             @xsums);
    IDie("Bad pack") unless length($maptosign) == 896;
    my $signature = SignStringRaw($privkeyfile, $maptosign);
    IDie("Bad sign") unless length($signature) == 128;
    my $cdmmap =
        pack(CDM10_PACK_FULL_FILE_FORMAT,
             $maptosign,
             $signature);
    IDie("Bad map") unless length($cdmmap) == 1024;
    return $cdmmap;
}

sub GetLegalSlotnum {
    my $slotnum = shift;
    UDie("Missing slotnum")
        unless defined $slotnum;
    UDie("Illegal slotnum '$slotnum'")
        unless $slotnum =~ /^([[:xdigit:]]{1,2})$/;
    my $num = hex($1);
    UDie("Illegal slotnum $num")
        unless $num > 0 && $num < 256; # 00 reserved as illegal slotnum
    return $num;
}

sub GetLegalLabel {
    my $label = shift;
    UDie("Missing label")
        unless defined $label;
    UDie("Illegal label '$label'")
        unless  $label =~ /^([[:print:]]+)$/;
    my $val = $1;
    my $maxlen = 16;
    UDie("Label too long '$label' (max $maxlen)")
        unless length($label) <= $maxlen;
    return $val;
}

sub MakeNextZipTime {
    # Reminder: A snippet from stackoverflow.com: 
    #   Zip entry timestamps are recorded only to two 2 second
    #   precision. This reflects the accuracy of DOS timestamps in use
    #   when PKZIP was created. That number recorded in the Zip will
    #   be the timestamp truncated, not the nearest 2 seconds.
    #
    # So I guess this is 'correct' rather than 'a hack':
    my $assignedinnertime = int(time()/2)*2; 

    # We also (may) want the low-res 'slotstamp' granularity time
    my $stamp = int($assignedinnertime/(60*5)); # seconds -> 5 minute chunks
    return ($assignedinnertime,$stamp);
}

sub MakeInnerZip {
    my ($pubkeydata,$mfzfilename,$assignedinnertime,@files) = @_;
    my $compressedoutput;

    my $z = new IO::Compress::Zip
        \$compressedoutput,
        Name          => MFZ_PUBKEY_NAME,
        Time          => $assignedinnertime,
        @zipOtherOptions,
        BinModeIn     => 1
        or IDie("Zip init failed for inner: $ZipError");
    $z->print ($pubkeydata);

    $z->newStream(
        Name          => MFZ_FILE_NAME,
        Time          => $assignedinnertime,
        @zipOtherOptions,
        BinModeIn     => 1)
        or die "Zip reinit failed on ".MFZ_FILE_NAME.": $ZipError\n";
    $z->print ($mfzfilename);

    for my $file (@files) {
        my $origFile = $file;
        $file = abs_path($file);
        # Check top-level special files after path normalization
        UDie("'$origFile' is handled automatically, cannot pack it explicitly")
            if $file eq "/".MFZ_PUBKEY_NAME
            or $file eq "/".MFZ_FILE_NAME;

        open (my $fh, "<", $file) or UDie("Can't read '$file': $!");
        my $modtime = (stat($fh))[9];

        $z->newStream(
            Name          => $file,
            @zipOtherOptions,
            BinModeIn     => 1,
            Time          => $modtime,
            ExtAttr       => 0666 << 16)
            or die "Zip reinit failed on '$file': $ZipError\n";

        while (<$fh>) { $z->print ($_); }
        close $fh or IDie("Failed closing '$file': $!");
    }

    close $z;
    return ($compressedoutput,$assignedinnertime);
}

sub MakeOuterZip {
    my ($signature,$inner,$announce) = @_;
    my $compressedoutput;
    my $z = new IO::Compress::Zip
        \$compressedoutput,
        Name          => MFZ_SIG_NAME,
        @zipOtherOptions,
        BinModeIn     => 1
        or IDie("Zip init failed for outer: $ZipError");
    $z->print($signature);

    $z->newStream(
        Name          => MFZ_ZIP_NAME,
        @zipOtherOptions,
        BinModeIn     => 1,
        ExtAttr       => 0666 << 16)
        or die "Zip reinit failed for outer: $ZipError\n";
    $z->print($inner);

    if (defined $announce) {
        IDie("Why are you here? ANNOUNCING doesn't exist anymore");
    }

    close $z;
    return $compressedoutput;
}

## REACHED EOF
exit 2;
