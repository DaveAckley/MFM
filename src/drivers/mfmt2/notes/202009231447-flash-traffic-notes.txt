{66}  -*- text -*-
[0:

Wed Sep 23 14:49:40 2020 OK, starting a new notes file, here,

  /home/t2/MFM/src/drivers/mfmt2/notes/202009231447-flash-traffic-notes.txt

to shift our brains from CDM processing to getting mfmt2 level flash
traffic working in some decent way.

[1:

Wed Sep 23 14:51:55 2020 OK so I tried the existing flash menu and
succeeded in killing the neighbor's mfmt2:

    Sep 23 14:51:04 beaglebone mfm.sh[1764]: 3356: MSG: FLASH: 0x/opt/scripts/t2/mfm.sh: line 17: 10237 Aborted                 /home/t2/MFM/bin/mfmt2 -w /home/t2/MFM/res/mfmt2/wconfig.txt -z MFMT2-FAKE-MFZID
    Sep 23 14:51:04 beaglebone mfm.sh[1764]: mfmt2 exited status 134 -- RESTARTING
    Sep 23 14:51:06 beaglebone mfm.sh[1764]: Launching mfmt2

Let's get into gdb.
[2:

Wed Sep 23 14:53:32 2020 Aand we're going to need to rebuild with
  DEBUG=1..[3:

Wed Sep 23 14:54:21 2020 Starting that..

[4:

Wed Sep 23 14:55:15 2020 The no-symbols gdb took us this far:

    #0  0x0046796e in MFMLongJmpHere ()
    #1  0x0045f1a8 in MFM::ByteSink::Vprintf(char const*, std::__va_list&) [clone .part.9] ()
    #2  0x0042ea4c in MFM::Logger::Vreport(MFM::Logger::Level, char const*, std::__va_list&) ()
    #3  0x00438586 in MFM::Logger::Message(char const*, ...) ()
    #4  0x00448c20 in MFM::T2FlashTrafficManager::handleInboundTraffic() [clone .part.20] ()
    #5  0x0044af7c in MFM::T2FlashTrafficManager::onTimeout(MFM::TimeQueue&) ()
    #6  0x0042cdde in MFM::T2Tile::main() ()
    #7  0x0042e09a in MFM::MainDispatch(int, char**) ()
    #8  0x0042caa6 in main ()
    (gdb)

:4]

:3]

:2]

:1]

:0]
[5:

Wed Sep 23 15:00:59 2020 So, while MFM's building yet again, let's do
a little WIBNI on the whole flash traffic thing:

Wouldn't It Be Nice If

 - Being a flash command was (nearly) orthogonal to the single-tile
   GUI.  Whatever you can do via the single-tile GUI, you could do as
   flash traffic in some uniform way.

 - Flash traffic radius was determined primarily by geometry, with a
   TTL hop count just as drop-dead backup.  So each packet tracked its
   location relative to the origin as it moved.

 - Flash traffic had some way of detecting the edges of the power zone
   in which it originated, so commands could be addressed to the zone.

 -

:5]
[6:

Wed Sep 23 15:31:19 2020 So, the current structure is all based around
the specific flash screen.  And I think we should push back against
that.  It's Wednesday.  We've got at least two more good days, so
let's 'just quick' design an 'action engine' for user-level
activities.  Then we'll hook both the flash traffic and the GUI
screens to those actions.

So we'll need a representation of the actions.  I'm thinking short but
not necessarily fixed-length strings, with category and subcategory of
actions.

Categories:
  CONTROL:
     DISPLAY
     EVENT
     DISK
     MFMT2
     PHYSICS

  DEBUG:

  QUERY:

[7:

Wed Sep 23 15:57:57 2020 Stuff like that.

Now, maybe we should think about doing worm-routing for these things,
so that we actually could do query replies with some limited
robustness.

So we need a notion of outbound and inbound, and while going outbound,
we append arrival direction at the end, for the reverse trip to use as
a source direction.  That automatically limits the radius we can do,
but I'd expect to limit it much more than that.

Full-path tracking is pretty expensive, vs, say, two signed bytes for
like +-a 125 tile radius.  And it's not really in the 'broadcast'
model at all.  The problem of course is non-convex routes that get
traversed on the outbound can become trapping states on the return.

Maybe we really should leave query/reply for another day.

:7]

:6]
[8:

Wed Sep 23 16:17:35 2020 I like the category/subcategory because it
holds out the possibility of adding new actions without invalidating
older ones.  Although just burning obsolete action numbers
accomplishes that two; just have to have a monotonic list of actions
that never gets reorganized.

Like errno.h.  actno.h.

[9:

Wed Sep 23 16:19:49 2020 OK what does the packet format look like?

 0x80, cmd, spinner, ttl, chksum

Do we think we can do anything about the spinner and the collision
issue?  We could have the hard button cause the tile to preemptively
try to become the leader.  And if we say don't press multiple hard
buttons at once..[10:

Thu Sep 24 02:47:42 2020 OK I'm ready to stop with the WIBNI and just
get some stuff working.  I just re-watched a couple episodes from last
Dec-Jan and we already demoed a minimal but functional grid-wide flash
menu back then, that I still like better than the current thing I've
got.  So let's keep the existing 'simple' structure and just get to
it.

TODO

[57: Wed Sep 30 11:44:28 2020
DONE :57] - Reorg menus


t2tile  reboot off killcdm
mfmt2   run pause crash quit
display sites tile tq log cdm
physics clear seed1 seed2 initdebug


[11:

Thu Sep 24 03:00:00 2020

[58:
DONE  :58] - Change main menu center square to 'Control', change its bg color

[27: Thu Sep 24 14:42:09 2020 Calling this one: FC  :27]
Control menu

  T2TILE   PHYSICS  --
  MFMT2    DISPLAY  --
  GRID      --       X


CONTROL T2TILE menu[28: FC_T2  :28]

  REBOOT   SHUTDOWN KILLCDM
    --     --       --
  GRID     TILE      X

CONTROL MFMT2 MENU[29: FC_MFM  :29]
  RUN    PAUSE    --
  CRASH  QUIT     --
  GRID   TILE       X

CONTROL DISPLAY MENU[30: FC_DISP  :30]
  SITES  TILE   CDM
  TQ     LOG     --
  GRID   TILE     X

CONTROL PHYSICS MENU
  CLEAR  SEED1  SEED2
  SELECT  --     --
  GRID   TILE     X

[12:

Thu Sep 24 03:26:00 2020

[59:
DONE :59] - All the control menus are a radio group on the top, and pushbutton
   Grid/Tile/x on the bottom.  So we need radio groups

[60:
DONE :60] - Grid buttons have a pop-up confirm that shows the current grid
   radius.  Tile buttons execute immediately without confirmation

:12]

:11]

:10]

:9]

:8]
[13:

Thu Sep 24 03:28:02 2020 OK, how to do radio groups, given what we've
got?

Well, what's our wconfig syntax, there, again?  What are all the
pieces of this, say:

    [TQ_Checkbox_Living T2TileLiveCheckbox TQ `bfs6x6(5,0,5,0)`]
        font=2

[14:

Thu Sep 24 03:30:33 2020 Tracking..  SDLI.cpp:533,
SDLI::parseWindowConfig -> SDLI::parsePanelDecl.  It's 

 [PANELNAME WINDOWTYPE PARENTWINDOW GEOMETRY]

And it's SDLI::parsePanelDecl -> SDLI::makePanelType(WINDOWTYPE),
where everything's hardcoded.

So could we define a special format for a PANELNAME that include
radio-group information?[15:

Thu Sep 24 03:36:38 2020 Well, let's see if panel properties can do it
without a ton of pain.  After the panel decl produces PANEL,
processing continues with: 

SDLI::parseWindowConfig
  -> SDLI::parsePanelProperty(input, PANEL)
     -> SDLI:: configurePanelProperty(input, PANEL, PROP, VAL)

and all the known properties are hardcoded there.  Subclass-specific
properties are 'handled' by dynamic casting like:

    else if (!strcmp(prop,"fontheightadjust")) {
      GenericTextPanel * l = dynamic_cast<GenericTextPanel*>(forPanel);
      if (!l) fatal(lcbs,"'%s' applies only to TextPanels",prop);
      l->SetFontHeightAdjust(parseSigned(lcbs,cbbs));
    }

and we could surely redo that with a

  virtual bool Panel::acceptsProperty(PROP,VAL)

kind of thing if we wanted to.

But in any case it seems we could have a type RadioButton that would
accept a radiogroup property.  And I guess in fact we'd put all the
'Grid'able buttons in a single radiogroup, even though they're on
several different screens and never all visible at once, to avoid
ambiguity about what command is being requested when Grid is invoked.

And could the radiobutton be a subclass of checkbox, perhaps?[16:

Thu Sep 24 04:15:20 2020 I suspect so.  I also suspect it's worth
doing a semi-general AbstractRadioButton in src/gui, with some kind of
(possibly static) map to manage the radio groups.  (Although we could
just beat the whole panel hierarchy looking for matching radiogroup
tags, if it's happening at click-a-button speeds.)

But not now.  Going for second sleep.

:16]

:15]

  :14]
:13]
[17:

Thu Sep 24 08:53:20 2020 OK.  Another flag-moving day, but perhaps we
can make a start on AbstractRadioButton.
[18:

Thu Sep 24 09:42:49 2020 OK, so now we have a built-but-untested
AbstractRadioButton class.  Pretty clean at that, if brute force.

Let's do some kind of quick hack in mfmt2 to make a couple of this
beins.

TODO:

[19: Thu Sep 24 11:22:28 2020
DONE :19] - Some kind of T2RadioButton instance class

[20:
DONE :20] - Makeable by SDLI

[21:
DONE :21] - With a radiogroup property

[22:
DONE :22] - And a couple instances in wconfig.pl somewhere.

:18]
:17]
[23:

Thu Sep 24 11:22:45 2020 So we have implications in develop, with new
files AbstractRadioButton.(h|cpp), but I *think* they're pretty safe.

Heck let's commit.
[24:

Thu Sep 24 11:41:10 2020 Cleaned up a little..  Now committing.

:24]
:23]
[25:

Thu Sep 24 13:58:48 2020 OK, flag moved.  Let's redo the menus and let
that drive us toward shipping flash.
[26:

Thu Sep 24 14:00:58 2020 Following :11: above.

:26]
:25]
[31:

Thu Sep 24 15:25:49 2020 Alright, so we have a take on the flash
menus, except for 'Here' and 'Grid' which remain to be implemented.

How is 'Grid' going to work?  We want it to be like a popup
confirmation, that displays what it's planning to do

        ACTION
       DISTANCE
     DO IT     X

Let's just try making a 'popup' and see what kind of real estate we
might have.

:31]
[32:

Thu Sep 24 23:40:13 2020 OK, on.  Let's have credible flash traffic
moving in the next three hours or so.

:32]
[33:

Fri Sep 25 10:20:32 2020 Well, back after second sleep.  Made a lot of
progress but have a lot of FAIL(INCOMPLETE_CODE)s still to deal with.
GO GO GO.

:33]
[34:

Fri Sep 25 14:06:49 2020 OK well took forever but we've kind of sorted
out the interface stuff and now we've reached sending the damn flash
packet.  My intention is to slightly expand the packet format to:

  0x80|dir8, cmd&0x7f, spinner, dist, ttl, chksum

[36:

Sat Sep 26 03:02:14 2020 Where it's the addition of 'dist' --
providing the original max ttl -- that's new.  As I sit here I'm
wondering if swapping the cmd and the spinner might be worth doing,
giving the 7-bit short byte to the spinner and leaving a full byte for
the cmd.  Also means there are OoB byte values starting at 0x80, FWIW.

Processing a flash packet goes like this:

 (1) Check chksum and discard if failure
 (2) Check spinner against local last-command-handled value, for three
     cases:
     (2.1) LCH is unitted || LCH < spinner: LCH = spinner and accept cmd
     (2.2) LCH == spinner-1

[37:

Sat Sep 26 03:35:38 2020 Dammit I'm still unhappy with the spinner.
We know from theory and experience that it's the weak leak, and we
know that we have to accept SOME kind of limits on broadcasting in an
indefinitely scalable architecture.

But having a single spin counter still irks me.  I want to replace it
with a three byte (xorigin,yorigin,originspinner), where the flash
packet propagation automatically rewrites (xorigin,yorigin) as the
packet moves.  And each recipient maintains a table of relative
origins that it has heard from, and only compares spinners to the
previous spinner from the same origin.

Use a single signed byte for each of xorigin, yorigin, and do the
increment by (+-2,0) when moving horizontally, and (+-1,+-1) when
moving diagonally.  Have a dead zone at like 121..127 and -121..128,
so we won't propagate into a dead zone coordinate, and won't accept
propagation of anything that implies we are in a dead zone.  That
still gives us a (+-120,+-120) range, in principle, for a maximum
addressable grid of like 240 tiles up and down, and 120 across.
[38:

Sat Sep 26 04:47:26 2020 So that means the packet would be like

  0x80|dir8, cmd&0x7f, xorg, yorg, spinner, dist, ttl, chksum

and the checksum would have to be either restricted or updated per
hop.  Updated per hop.  So, an eight byte flash command, not too bad.

(Would already have to update chksum per hop just because of the ttl.)

And I guess we'd use a map of u16,u8 to store origin-specific spinner
values, and we'd accept if we'd never heard from an origin, or if what
we get is > than what we have in the wraparound sense.  If we hit in
the spinner <= than what we have we discard.  If we hit in the
deadzone, what, we discard and reset to never heard from?

:38]


:37]

:36]:34]
[35:

Fri Sep 25 14:32:09 2020 Now I'm really wondering if we could handle
flash packets as priority traffic at the LKM level.  cdm really
pummels the bulk rate channel at this point, which could at least
cause flash commands to be significantly delayed, if not missed
entirely. 

:35]
[39:

Sat Sep 26 12:33:06 2020 OK, we're shipping and receiving NEWSTAL
8-byte flash packets, and now it's time to execute them.  Our plan is:

[44: Sat Sep 26 13:14:00 2020  In receiveFlashPacket
DONE :44] - Discard obsolete packets

[45: DONE  :45] - Record acceptance of this packet

[46: DONE  :46] - Store packet (info?  or the whole thing?) as the pending command
   
 - Run a timer based on the TTL of the pending command

 - Raise a special panel -- like the hard button test we did -- to
   count down the flash timer.  Panel shows the pending command and
   the count remaining.

 - When the count expires, do the command and clear pending (which
   should lower the special panel).

 - Have the flash manager run about 3Hz, and have the timer count down
   at about 1Hz.  Goal is to have the most remote tiles fire first,
   with a stochastic gradient back towards the origin, so that
   notionally anyway, the captain of the ship goes last.

[40:

Sat Sep 26 12:42:16 2020 That seems nice.  And can we put some
combination of existing and new method names on those bullets?

[41: Sat Sep 26 12:43:29 2020 Guess we need to settle the
how-to-record-pending-command issue.[42:

Sat Sep 26 12:44:08 2020 Well screw it.  ATM we have 'T2FlashCmd
mPendingCmd;'; let's change that to 'FlashTraffic mPendingCmd;' and
plan to count it down in place.  (Meaning, e.g., we won't use it as a
source for re-sending to anybody.)  Just that much GO GO GO.[43:

Sat Sep 26 12:46:44 2020 How do we tell if there's no valid packet in
there?  Separate timer set to the future or something?  If we're
running T2FlashTrafficManager at 3Hz, it's going to need some kind of
pending timer somewhere.  Gah we could make a TimeoutAble flash packet
execution unit, and put it on the TQ.  Could have fricken multiple
flash commands pending at once.  Woah bein woah.  Easy bein.

:43]

:42]  :41]

:40]

:39]
[47:

Sat Sep 26 13:14:39 2020 And what is the initiation workflow here?
From the ENGAGE click to the full-TTL packet shipping?

At the moment it's in 'T2FlashTrafficManager::executePending' but at
the very least that's a terrible name for it.. [48:

Sat Sep 26 13:17:19 2020 OK, current flow is T2FM::OnClick ->
T2FM::doControlCmd -> T2FM::executePending.  We want it to be more
like T2FM::OnClick -> T2FM::launchCommand()

:48]

:47]
[49:

Sat Sep 26 14:03:15 2020 Well the spinner still feels messed up.
Trying to write code to handle the case where the index is way beyond
what's expected.  The problem is that could legitimately happen, if
the source did a long-range cmd, then a bunch of short ranges, then
another long range.

It seems like what we really want to do is just block out really
really short-term repeats, like we'll get via multipath on a single
command.  To do that we could just remember the last packet we saw and
reject dupes (excluding ttl), but then we're vulnerable if two
commands manage to get circulating at once.

We could keep a little queue of previous packets, and age them out
based on time.  Could that be the same timing mechanism that's
delaying execution of a cmd?  Have like a FIFO, scan it for dupes,
push new ones in the back, pull ones off the front once their time has
expired?  Except later arriving cmds might have shorter time-outs; it
would need to be a priority_queue.
[50:

Sat Sep 26 14:12:14 2020 Well, maybe?  What do we think here?  Need to
GOGOGO.  So suppose we do that.  Then:

 - If any late echoes arrive after we've executed a command, we're
   screwed; we'll do it again because it aged out.

So maybe we need a place to remember retired commands as well?  Where
does it end?  Remember the last command executed from every source and
suppress matching entries?

Scan the pq for matches, drop if matched.

If not, match against the last cmd from origin, drop if matched.

If not, insert into pq.

When it comes off the pq, execute and store in last cmd from origin.

[51:

Sat Sep 26 14:20:17 2020 Well maybe?  This is a bit of a rehack.. so,
do we think we actually want it?[52:

Sat Sep 26 14:36:53 2020 Dunno.  Let's try it.

:52]

:51]

:50]

:49]
[53:

Sat Sep 26 16:50:18 2020 OK, well it's time to break for cocktails
here, but we have gotten far enough to uncover one MINOR OH SO MINOR
issue with the current scheme:

 - Dupes via packet origin doesn't play well with a loopback cable:

    210: MSG: EXECUTED FLASH TRAFFIC 50
    211: WRN: MenuAction RETURN on empty stack
    212: WRN: Big MSPAST 2881
    213: WRN: Big deltams 3044 on update 35
    214: MSG: rFP:NW+dsp:cdm+7/8(1,-1)
    215: WRN: Big MSPAST 141462
    216: MSG: rFP:SE+dsp:cdm+7/8(-1,1)
    217: WRN: Big MSPAST 302122
    218: MSG: rFP:NW+dsp:cdm+6/8(2,-2)
    219: WRN: Big MSPAST 2527
    220: MSG: rFP:SE+dsp:cdm+6/8(0,0)
    221: WRN: Big MSPAST 2488
    222: MSG: rFP:NW+dsp:cdm+6/8(0,0)
    223: MSG: rFP:SE+dsp:cdm+6/8(-2,2)
    224: WRN: Big MSPAST 7188
    225: MSG: rFP:NW+dsp:cdm+5/8(3,-3)
    226: WRN: Big MSPAST 1864
    227: MSG: rFP:SE+dsp:cdm+5/8(1,-1)
    228: MSG: rFP:NW+dsp:cdm+5/8(1,-1)
    229: MSG: rFP:SE+dsp:cdm+5/8(-1,1)
    230: MSG: rFP:NW+dsp:cdm+5/8(-1,1)
    231: MSG: rFP:SE+dsp:cdm+5/8(-3,3)
    232: WRN: Big MSPAST 9079
    233: MSG: rFP:SE+dsp:cdm+4/8(2,-2)
    234: MSG: rFP:NW+dsp:cdm+4/8(4,-4)
    235: WRN: Big MSPAST 4893
    236: MSG: rFP:SE+dsp:cdm+4/8(-4,4)
    237: MSG: rFP:NW+dsp:cdm+4/8(-2,2)
    238: MSG: rFP:SE+dsp:cdm+3/8(3,-3)
    239: MSG: rFP:NW+dsp:cdm+3/8(5,-5)
    240: MSG: rFP:SE+dsp:cdm+3/8(-5,5)
    241: MSG: rFP:NW+dsp:cdm+3/8(-3,3)
    242: MSG: rFP:SE+dsp:cdm+2/8(4,-4)
    243: MSG: rFP:NW+dsp:cdm+2/8(6,-6)
    244: MSG: rFP:SE+dsp:cdm+2/8(-6,6)
    245: MSG: rFP:NW+dsp:cdm+2/8(-4,4)
    246: MSG: rFP:SE+dsp:cdm+1/8(5,-5)
    247: MSG: rFP:NW+dsp:cdm+1/8(7,-7)
    248: MSG: rFP:SE+dsp:cdm+1/8(-7,7)
    249: MSG: rFP:NW+dsp:cdm+1/8(-5,5)
    250: MSG: rFP:SE+dsp:cdm+0/8(6,-6)
    251: MSG: rFP:NW+dsp:cdm+0/8(8,-8)
    252: MSG: rFP:SE+dsp:cdm+0/8(-8,8)
    253: MSG: rFP:NW+dsp:cdm+0/8(-6,6)
    254: WRN: Big deltams 471720 on update 36

:53]
[54:

Sat Sep 26 22:12:41 2020 Well so not sure whether loopback undermines
this whole idea or not, but I want to get it working as is and then
decide.  [55:

Sat Sep 26 22:14:21 2020 A possibility is to propagate but not accept
equivalent commands: If we already have an X command in the queue, do
not store another one even if it's from a(n apparently) different
origin.  Keep whichever one is already in there?

:55]

:54]
[56:

Wed Sep 30 02:15:39 2020 OK, so T2sup#286 is out.

:56]
[61:

Thu Oct  1 01:58:05 2020 Hmm slow reboot after #286.  Need to go big
picture and wondering where's the right notes/ directory to do that?

[62:

Thu Oct  1 04:25:15 2020 Going to T2-12/notes for 'big picture'.

:62]

:61]
[63:

Sat Oct  3 14:14:24 2020 Back here to note:

 - Implemented AbstractRadioGroup to support on-click behavior at the
   level of a whole group.

 - Implemented MFMRunRadioGroup using it, now we have a Run/Pause
   radio group with two buttons instead of the checkbox.

:63]
[64:

Sat Oct  3 14:19:09 2020 Yikes I have a ton of uncommitted stuff?  Is
that for real?  How did this happen:

    root@beaglebone:/home/t2/MFM# git status
    On branch develop
    Your branch is ahead of 'origin/develop' by 4 commits.
      (use "git push" to publish your local commits)

    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)

            modified:   Makefile
            modified:   src/drivers/mfmt2/include/FlashTraffic.h
            modified:   src/drivers/mfmt2/include/SDLI.h
            modified:   src/drivers/mfmt2/include/T2FlashTrafficManager.h
            modified:   src/drivers/mfmt2/include/T2Tile.h
            modified:   src/drivers/mfmt2/include/T2UIComponents.h
            modified:   src/drivers/mfmt2/notes/202009231447-flash-traffic-notes.txt
            modified:   src/drivers/mfmt2/src/FlashTraffic.cpp
            modified:   src/drivers/mfmt2/src/SDLI.cpp
            modified:   src/drivers/mfmt2/src/T2FlashTrafficManager.cpp
            modified:   src/drivers/mfmt2/src/T2Tile.cpp
            modified:   src/drivers/mfmt2/src/T2UIComponents.cpp
            modified:   src/drivers/mfmt2/wconfig.pl
            modified:   src/gui/include/AbstractRadioButton.h
            modified:   src/gui/src/AbstractRadioButton.cpp
            modified:   src/t2lib/include/T2Utils.h
            modified:   src/t2lib/src/T2Utils.cpp

[65:

Sat Oct  3 14:21:09 2020 I committed in T2-12 and forgot about MFM?
Yikes!  I guess: Time to commit.

:65]

:64]
